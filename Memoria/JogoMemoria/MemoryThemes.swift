//
//  MemoryThemes.swift
//  Memoria
//
//  Created by Erick Leonardo Weil on 07/03/23.
//

import Foundation

// Aqui est√£o todos os Temas do Jogo da Mem√≥ria
// A ideia √© que um tema pode ser definido em um √∫nica linha
public struct Tema {
    private static let MAXIMO_SIMBOLOS = 1000 // Impedir que o genArray trave por escolher intervalos grandes demais
    
    public let descricao: String // Exibido no bot√£o de escolha do tema
    public let cor: Cor // Cor do fundo das cartas
    public let simbolos: Array<String> // Poss√≠veis s√≠mbolos que poder√£o ser utilizados
    public var primeiroSimbolo: String { // Para exibir no bot√£o de escolha do tema
        simbolos.first ?? "?"
    }
    
    // Struct Cor pr√≥pria para n√£o depender de SwiftUI.Color
    public struct Cor {
        let r: Double
        let g: Double
        let b: Double
        
        public static var red: Cor { Cor(r: 0.8, g: 0.1, b: 0.1)}
        public static var orange: Cor { Cor(r: 0.8, g: 0.75, b: 0)}
        public static var light_gray: Cor { Cor(r: 0.15, g: 0.15, b: 0.15)}
        public static var gray: Cor { Cor(r: 0.5, g: 0.5, b: 0.5)}
        public static var indigo: Cor { Cor(r: 0, g: 0.25, b: 0.74)}
        public static var green: Cor { Cor(r: 0.1, g: 0.8, b: 0.1)}
    }
    
    public static let temas = [
        Tema("Veiculos",Cor.red) { i in stringIter(i,"üöóüöïüöôüööüöõüöúüõµüèçÔ∏èüõ¥üö≤üõπüõºüõ∫üöåüöéüöãüöâüõ∏üöÄüõ•Ô∏è‚õµüõ≥Ô∏èüö§üö¢")},
        Tema("Letras",Cor.light_gray) {i in unicodeIter(i,"A","Z")},
        Tema("Animais",Cor.orange) {i in unicodeIter(i,"ü¶Ü","ü¶î")},
        Tema("Natureza",Cor.green) {i in unicodeIter(i,"üçè","üåÆ")},
        Tema("Relogios",Cor.gray) {i in unicodeIter(i,"üïê","üïß")},
        Tema("Bandeiras",Cor.indigo) {i in stringIter(i,"üá¶üá®üá¶üá©üá¶üá™üá¶üá´üá¶üá¨üá¶üáÆüá¶üá±üá¶üá≤üá¶üá¥üá¶üá∂üá¶üá∑üá¶üá∏üá¶üáπüá¶üá∫üá¶üáºüá¶üáΩüá¶üáøüáßüá¶üáßüáßüáßüá©üáßüá™üáßüá´üáßüá¨üáßüá≠üáßüáÆüáßüáØüáßüá±üáßüá≤üáßüá≥üáßüá¥üáßüá∂üáßüá∑üáßüá∏üáßüáπüáßüáªüáßüáºüáßüáæüáßüáøüá®üá¶üá®üá®üá®üá©üá®üá´üá®üá¨üá®üá≠üá®üáÆüá®üá∞üá®üá±üá®üá≤üá®üá≥üá®üá¥üá®üáµüá®üá∑üá®üá∫üá®üáªüá®üáºüá®üáΩüá®üáæüá®üáøüá©üá™üá©üá¨üá©üáØüá©üá∞üá©üá≤üá©üá¥üá©üáøüá™üá¶üá™üá®üá™üá™üá™üá¨üá™üá≠üá™üá∑üá™üá∏üá™üáπüá™üá∫üá´üáÆüá´üáØüá´üá∞üá´üá≤üá´üá¥üá´üá∑üá¨üá¶üá¨üáßüá¨üá©üá¨üá™üá¨üá´üá¨üá¨üá¨üá≠üá¨üáÆüá¨üá±üá¨üá≤üá¨üá≥üá¨üáµüá¨üá∂üá¨üá∑üá¨üá∏üá¨üáπüá¨üá∫üá¨üáºüá¨üáæüá≠üá∞üá≠üá≤üá≠üá≥üá≠üá∑üá≠üáπüá≠üá∫üáÆüá®üáÆüá©üáÆüá™üáÆüá±üáÆüá≤üáÆüá≥üáÆüá¥üáÆüá∂üáÆüá∑üáÆüá∏üáÆüáπüáØüá™üáØüá≤üáØüá¥üáØüáµüá∞üá™üá∞üá¨üá∞üá≠üá∞üáÆüá∞üá≤üá∞üá≥üá∞üáµüá∞üá∑üá∞üáºüá∞üáæüá∞üáøüá±üá¶üá±üáßüá±üá®üá±üáÆüá±üá∞üá±üá∑üá±üá∏üá±üáπüá±üá∫üá±üáªüá±üáæüá≤üá¶üá≤üá®üá≤üá©üá≤üá™üá≤üá´üá≤üá¨üá≤üá≠üá≤üá∞üá≤üá±üá≤üá≤üá≤üá≥üá≤üá¥üá≤üáµüá≤üá∂üá≤üá∑üá≤üá∏üá≤üáπüá≤üá∫üá≤üáªüá≤üáºüá≤üáΩüá≤üáæüá≤üáøüá≥üá¶üá≥üá®üá≥üá™üá≥üá´üá≥üá¨üá≥üáÆüá≥üá±üá≥üá¥üá≥üáµüá≥üá∑üá≥üá∫üá≥üáøüá¥üá≤üáµüá¶üáµüá™üáµüá´üáµüá¨üáµüá≠üáµüá∞üáµüá±üáµüá≤üáµüá≥üáµüá∑üáµüá∏üáµüáπüáµüáºüáµüáæüá∂üá¶üá∑üá™üá∑üá¥üá∑üá∏üá∑üá∫üá∑üáºüá∏üá¶üá∏üáßüá∏üá®üá∏üá©üá∏üá™üá∏üá¨üá∏üá≠üá∏üáÆüá∏üáØüá∏üá∞üá∏üá±üá∏üá≤üá∏üá≥üá∏üá¥üá∏üá∑üá∏üá∏üá∏üáπüá∏üáªüá∏üáΩüá∏üáæüá∏üáøüáπüá¶üáπüá®üáπüá©üáπüá´üáπüá¨üáπüá≠üáπüáØüáπüá∞üáπüá±üáπüá≤üáπüá≥üáπüá¥üáπüá∑üáπüáπüáπüáªüáπüáºüáπüáøüá∫üá¶üá∫üá¨üá∫üá≤üá∫üá≥üá∫üá∏üá∫üáæüá∫üáøüáªüá¶üáªüá®üáªüá™üáªüá¨üáªüáÆüáªüá≥üáªüá∫üáºüá´üáºüá∏üáΩüá∞üáæüá™üáæüáπüáøüá¶üáøüá≤üáøüáºüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åøüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøüè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø")}
    ]
    
    init(_ descricao: String,_ cor: Cor,_ conteudo:@escaping (Int) -> String?) {
        self.descricao = descricao
        self.cor = cor
        self.simbolos = Tema.genArray(conteudo,max: Tema.MAXIMO_SIMBOLOS)
    }
    
    // ---------------------------------------------------------
    //                  Fun√ß√µes para gera√ß√£o de Temas
    // ---------------------------------------------------------
    
    // Retorna uma string para o √≠ndice desejado na String ou nil se o √≠ndice
    // est√° fora do intervalo
    private static func stringIter(_ i:Int,_ str: String) -> String? {
        if i < 0 || i >= str.count { return nil }
        
        return String(str[str.index(str.startIndex,offsetBy: i)])
    }

    // Retorna uma letra da codifica√ß√£o Unicode entre charA e charB
    // de acordo com o √≠ndice 'i'. ou nil se ocorrer algum problema no processo
    // (se chamar unicodeIter(2,"A","Z") retorna "C" )
    // Obs: Nem todos os emojis funcionam
    private static func unicodeIter(_ i:Int,_ charA: String,_ charB: String) -> String? {
        let uniA = Unicode.Scalar(charA)
        let uniB = Unicode.Scalar(charB)
        
        if uniA == nil || uniB == nil { return nil }
        
        let uniStart = min(uniA!.value,uniB!.value)
        let uniEnd = max(uniA!.value,uniB!.value)
        
        let uniIndex = uniStart + UInt32(i)
        
        if uniIndex > uniEnd { return nil }
        
        let scalar = Unicode.Scalar(uniIndex)
        
        if scalar == nil { return nil }
        
        return String(Character(scalar!))
    }
    
    // A ideia aqui √© a partir de uma das duas fun√ß√µes acima, produzir um array de Strings
    // Como elas retornam 'nil' ao fim, esta fun√ß√£o ir√° atravessar as fun√ß√µes geradoras
    // adicionando cada string retornada ao array at√© chegar no primeiro nil, retornando o array produzido
    private static func genArray(_ generator: (Int) -> String?,max: Int) -> Array<String> {
        var retArr:Array<String> = []
        var i = 0
        while let str = generator(i), i < max {
            retArr.append(str)
            i += 1
        }
        if retArr.isEmpty {
            retArr = ["?"] // nunca deve acontecer.
        }
        return retArr
    }
}
