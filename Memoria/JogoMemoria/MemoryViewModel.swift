//
//  MemoryViewModel.swift
//  Memoria
//
//  Created by Erick Leonardo Weil on 24/02/23.
//

import Foundation
import SwiftUI
class MemoryViewModel: ObservableObject {
    typealias Card = MemoryModel<String>.Card
    
    
    private static func createMemoryModel(_ estilo: Int) -> MemoryModel<String> {
        var alreadyChoosen = ""
        // A fun√ß√£o retorna o n√∫mero de s√≠mbolos como primeiro argumento
        var Nsimbolos:Int
        (Nsimbolos, _) = temas[estilo].proximoSimbolo()
        
        // N√£o ter mais cartas do que s√≠mbolos dispon√≠veis
        let pairs: Int = min(15,Nsimbolos)
        
        return MemoryModel<String>(pairs: pairs) {
            pair in
            
            // Encontra um s√≠mbolo que n√£o tenha sido escolhido j√°
            var str: Character = "‚Ç¨"
            var count: Int = 0
            repeat {
                (_, str) = temas[estilo].proximoSimbolo()
                count += 1
            } while alreadyChoosen.contains(str) && count < 1000
            
            alreadyChoosen += String(str)
            return String(str)
        }
    }
    
    private(set) var estilo = 0
    
    @Published
    private var model = createMemoryModel(0)
    
    
    var cards: Array<Card> {
        return model.cards
    }
    
    var pontos: Int {
        return model.pontos
    }
    
    // ---------------------- Intent's ----------------------
    
    func changeStyle(_ estilo: Int) {
        self.estilo = estilo
        model = MemoryViewModel.createMemoryModel(estilo)
    }
    
    func choose(_ card : Card) {
        model.choose(card)
    }
    
    private static func randomString(_ str: String) -> (Int,Character) {
        let randomInt = Int.random(in: 0..<str.count)
        return (str.count,str[str.index(str.startIndex,offsetBy: randomInt)])
    }
    
    
    private static func randomBetween(_ charA: String,_ charB: String) -> (Int,Character) {
        
        repeat {
            let uniA = Unicode.Scalar(charA)
            let uniB = Unicode.Scalar(charB)
            
            if uniA == nil || uniB == nil { break }
            
            let uniStart = min(uniA!.value,uniB!.value)
            let uniEnd = max(uniA!.value,uniB!.value)
            
            let randomInt: UInt32 = UInt32(Int64.random(in: Int64(uniStart)..<Int64(uniEnd+1)))
            
            let scalar = Unicode.Scalar(randomInt)
            
            if scalar == nil { break }
            
            return (Int(uniEnd - uniStart),Character(scalar!))
        } while false
        
        return (1,"‚ç∞")
    }
    
    public static let temas = [
        Tema("Veiculos",Color.red,"üöó") {randomString("üöóüöïüöôüööüöõüöúüõµüèçÔ∏èüõ¥üö≤üõπüõºüõ∫üöåüöéüöãüöâüõ∏üöÄüõ•Ô∏è‚õµüõ≥Ô∏èüö§üö¢")},
        Tema("Letras",Color.init(red: 0.15, green: 0.15, blue: 0.15),"A") {randomBetween("A","Z")},
        Tema("Animais",Color.orange,"ü¶Ü") {randomBetween("ü¶Ü","ü¶î")},
        Tema("Natureza",Color.green,"üçè") {randomBetween("üçè","üåÆ")},
        Tema("Relogios",Color.gray,"üïê") {randomBetween("üïê","üïß")},
        Tema("Bandeiras",Color.indigo,"üáßüá∑") {randomString("üá¶üá®üá¶üá©üá¶üá™üá¶üá´üá¶üá¨üá¶üáÆüá¶üá±üá¶üá≤üá¶üá¥üá¶üá∂üá¶üá∑üá¶üá∏üá¶üáπüá¶üá∫üá¶üáºüá¶üáΩüá¶üáøüáßüá¶üáßüáßüáßüá©üáßüá™üáßüá´üáßüá¨üáßüá≠üáßüáÆüáßüáØüáßüá±üáßüá≤üáßüá≥üáßüá¥üáßüá∂üáßüá∑üáßüá∏üáßüáπüáßüáªüáßüáºüáßüáæüáßüáøüá®üá¶üá®üá®üá®üá©üá®üá´üá®üá¨üá®üá≠üá®üáÆüá®üá∞üá®üá±üá®üá≤üá®üá≥üá®üá¥üá®üáµüá®üá∑üá®üá∫üá®üáªüá®üáºüá®üáΩüá®üáæüá®üáøüá©üá™üá©üá¨üá©üáØüá©üá∞üá©üá≤üá©üá¥üá©üáøüá™üá¶üá™üá®üá™üá™üá™üá¨üá™üá≠üá™üá∑üá™üá∏üá™üáπüá™üá∫üá´üáÆüá´üáØüá´üá∞üá´üá≤üá´üá¥üá´üá∑üá¨üá¶üá¨üáßüá¨üá©üá¨üá™üá¨üá´üá¨üá¨üá¨üá≠üá¨üáÆüá¨üá±üá¨üá≤üá¨üá≥üá¨üáµüá¨üá∂üá¨üá∑üá¨üá∏üá¨üáπüá¨üá∫üá¨üáºüá¨üáæüá≠üá∞üá≠üá≤üá≠üá≥üá≠üá∑üá≠üáπüá≠üá∫üáÆüá®üáÆüá©üáÆüá™üáÆüá±üáÆüá≤üáÆüá≥üáÆüá¥üáÆüá∂üáÆüá∑üáÆüá∏üáÆüáπüáØüá™üáØüá≤üáØüá¥üáØüáµüá∞üá™üá∞üá¨üá∞üá≠üá∞üáÆüá∞üá≤üá∞üá≥üá∞üáµüá∞üá∑üá∞üáºüá∞üáæüá∞üáøüá±üá¶üá±üáßüá±üá®üá±üáÆüá±üá∞üá±üá∑üá±üá∏üá±üáπüá±üá∫üá±üáªüá±üáæüá≤üá¶üá≤üá®üá≤üá©üá≤üá™üá≤üá´üá≤üá¨üá≤üá≠üá≤üá∞üá≤üá±üá≤üá≤üá≤üá≥üá≤üá¥üá≤üáµüá≤üá∂üá≤üá∑üá≤üá∏üá≤üáπüá≤üá∫üá≤üáªüá≤üáºüá≤üáΩüá≤üáæüá≤üáøüá≥üá¶üá≥üá®üá≥üá™üá≥üá´üá≥üá¨üá≥üáÆüá≥üá±üá≥üá¥üá≥üáµüá≥üá∑üá≥üá∫üá≥üáøüá¥üá≤üáµüá¶üáµüá™üáµüá´üáµüá¨üáµüá≠üáµüá∞üáµüá±üáµüá≤üáµüá≥üáµüá∑üáµüá∏üáµüáπüáµüáºüáµüáæüá∂üá¶üá∑üá™üá∑üá¥üá∑üá∏üá∑üá∫üá∑üáºüá∏üá¶üá∏üáßüá∏üá®üá∏üá©üá∏üá™üá∏üá¨üá∏üá≠üá∏üáÆüá∏üáØüá∏üá∞üá∏üá±üá∏üá≤üá∏üá≥üá∏üá¥üá∏üá∑üá∏üá∏üá∏üáπüá∏üáªüá∏üáΩüá∏üáæüá∏üáøüáπüá¶üáπüá®üáπüá©üáπüá´üáπüá¨üáπüá≠üáπüáØüáπüá∞üáπüá±üáπüá≤üáπüá≥üáπüá¥üáπüá∑üáπüáπüáπüáªüáπüáºüáπüáøüá∫üá¶üá∫üá¨üá∫üá≤üá∫üá≥üá∫üá∏üá∫üáæüá∫üáøüáªüá¶üáªüá®üáªüá™üáªüá¨üáªüáÆüáªüá≥üáªüá∫üáºüá´üáºüá∏üáΩüá∞üáæüá™üáæüáπüáøüá¶üáøüá≤üáøüáºüè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åøüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åøüè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø")}
    ]
    
    public struct Tema {
        public let descricao: String
        public let cor: Color
        public let primeiroSimbolo: String
        public let proximoSimbolo: () -> (Int,Character)
        
        init(_ descricao: String,_ cor: Color,_ primeiroSimbolo: String,_ conteudo:@escaping () -> (Int,Character)) {
            self.descricao = descricao
            self.cor = cor
            self.primeiroSimbolo = primeiroSimbolo
            self.proximoSimbolo = conteudo
        }
    }
}
